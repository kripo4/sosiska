# bot.py
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from db import User, engine, Notification, Session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "TOKKKKEN"

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
Session = sessionmaker(bind=engine)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
scheduler = AsyncIOScheduler()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user = update.effective_user
    session = Session()
    db_user = session.query(User).filter_by(telegram_id=user.id).first()
    
    if not db_user:
        db_user = User(telegram_id=user.id, username=user.username or 'NoName')
        session.add(db_user)
        session.commit()
        
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—ä–µ—Å—Ç—å —Å–æ—Å–∏—Å–∫–∏."
    )
    session.close()

async def sosiska(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /eat_sausage."""
    user = update.effective_user
    session = Session()
    db_user = session.query(User).filter_by(telegram_id=user.id).first()

    if db_user:
        db_user.sausages_eaten += 1
        session.commit()
        await update.message.reply_text(
            f"üå≠ –¢—ã —Å—ä–µ–ª —Å–æ—Å–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {db_user.sausages_eaten} —Å–æ—Å–∏—Å–æ–∫."
        )
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start.")
        
    session.close()

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —Å—ä–µ–¥–µ–Ω–Ω—ã–º —Å–æ—Å–∏—Å–∫–∞–º."""
    session = Session()
    top_users = session.query(User).order_by(User.sausages_eaten.desc()).limit(10).all()
    
    if not top_users:
        await update.message.reply_text("–ü–æ–∫–∞ –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –µ–ª —Å–æ—Å–∏—Å–∫–∏. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
        return

    message_text = "üèÜ **–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ —Å–æ—Å–∏—Å–∫–∞–º** üèÜ\n\n"
    for i, user in enumerate(top_users):
        message_text += f"{i+1}. {user.username or 'NoName'} ‚Äî {user.sausages_eaten} üå≠\n"

    await update.message.reply_text(message_text)
    session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_notification(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    session = Session()
    users = session.query(User).all()
    
    for user in users:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(user.telegram_id, "üîî –≠—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!")
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} ({user.telegram_id})")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} ({user.telegram_id}): {e}")
    
    session.close()

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def run_scheduler() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á."""
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    scheduler.add_job(send_notification, 'interval', hours=24)
    scheduler.start()

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("sosiska", sosiska)) # <-- –ò–ó–ú–ï–ù–ï–ù–û –ù–ê /sosiska
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ job_queue
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    application.job_queue.run_repeating(send_notification_job, interval=timedelta(hours=24)) # <-- –ò–ó–ú–ï–ù–ï–ù–û –ó–î–ï–°–¨
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

async def send_notification_job(context: ContextTypes.DEFAULT_TYPE):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è job_queue –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å 'context'.
    –û–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é send_notification.
    """
    await send_notification(context)
    
async def send_notification(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    session = Session()
    users = session.query(User).all()
    
    for user in users:
        try:
            await context.bot.send_message(user.telegram_id, "üîî –≠—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!")
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} ({user.telegram_id})")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} ({user.telegram_id}): {e}")
    
    session.close()

if __name__ == '__main__':
    main()
